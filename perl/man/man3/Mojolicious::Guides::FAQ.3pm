.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Guides::FAQ 3pm"
.TH Mojolicious::Guides::FAQ 3pm "2011-04-19" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Guides::FAQ \- Frequently Asked Questions
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This document contains the most frequently asked questions about
Mojolicious together with the right answers.
.SH "QUESTIONS"
.IX Header "QUESTIONS"
.SS "Why doesn't Mojolicious have any dependencies?"
.IX Subsection "Why doesn't Mojolicious have any dependencies?"
We are optimizing Mojolicious for user-friendliness and development speed
without compromises.
While there are no rules in Mojolicious::Guides::CodingGuidelines that
forbid dependencies, we do currently discourage adding non-optional ones in
favor of a faster and more painless installation process.
And we do in fact already use several optional \s-1CPAN\s0 modules such as
IO::KQueue, IO::Epoll, IO::Socket::IP, IO::Socket::SSL,
Net::Rendezvous::Publish and Plack to provide advanced functionality if
they are installed.
.SS "Why reinvent wheels?"
.IX Subsection "Why reinvent wheels?"
Because we can make them rounder.
Components specifically designed for user-friendliness and development speed
are not easy to come by.
While we are strong believers of the Perl mantra
\&\*(L"There is more than one way to do it.\*(R", we also believe that well designed
defaults result in a much more pleasant user experience.
We want the best of both worlds.
.SS "What about backwards compatibility?"
.IX Subsection "What about backwards compatibility?"
In conformance with Mojolicious::Guides::CodingGuidelines, we will always
deprecate a feature for at least one major release before removing or
changing it in incompatible ways.
New features can however be marked as experimental to explicitly exclude them
from these rules.
This gives us the necessary freedom to ensure a healthy future for
Mojolicious.
So, as long as you are not using anything marked experimental, untested or
undocumented, you can always count on backwards compatibility, everything
else would be considered a bug.
.ie n .SS "What does the error ""Maximum message size exceeded."" mean?"
.el .SS "What does the error ``Maximum message size exceeded.'' mean?"
.IX Subsection "What does the error Maximum message size exceeded. mean?"
To protect your applications from excessively large requests and responses,
our \s-1HTTP\s0 parser has a cap after which it will automatically stop accepting
new data, and in most cases force the connection to be dropped.
This limit is around \f(CW\*(C`5MB\*(C'\fR by default, you can use the
\&\f(CW\*(C`MOJO_MAX_MESSAGE_SIZE\*(C'\fR environment variable to change this value.
.ie n .SS "What does the error ""Maximum line size exceeded."" mean?"
.el .SS "What does the error ``Maximum line size exceeded.'' mean?"
.IX Subsection "What does the error Maximum line size exceeded. mean?"
This is a very similar protection mechanism to the one described in the
previous answer, but a little more specific.
It limits the maximum length of any \f(CW\*(C`\er\en\*(C'\fR terminated part of a \s-1HTTP\s0
message, such as request line, status line and headers.
This limit is around \f(CW\*(C`10KB\*(C'\fR by default, you can use the
\&\f(CW\*(C`MOJO_MAX_LINE_SIZE\*(C'\fR environment variable to change this value.
.SS "Does Mojolicious run on Windows systems?"
.IX Subsection "Does Mojolicious run on Windows systems?"
Sure it does!
Right now there are two different ways of running Perl on the Windows
platform.
One is \f(CW\*(C`Strawberry Perl\*(C'\fR and the other is \f(CW\*(C`ActiveState Perl\*(C'\fR.
Both are capable Perl distributions which are stable, mature and ready for
production.
But \f(CW\*(C`Strawberry Perl\*(C'\fR is quite a bit better at dealing with the \s-1CPAN\s0 and
especially \s-1XS\s0 based modules due to its remarkable toolchain.
With it you can even install modules straight from the source as you would do
on a Unix based machine.
.SS "Is it possible to run the builtin webserver on Windows?"
.IX Subsection "Is it possible to run the builtin webserver on Windows?"
It is!
The builtin webserver is great way to run your Mojolicious web application
on any platform.
See Mojolicious::Guides::Cookbook for more information about running and
deploying Mojolicious applications.
.PP
Note that if you run your application with the \f(CW\*(C`\-\-reload\*(C'\fR option Windows
will lock your files.
A simple Windows editor like \f(CW\*(C`WordPad\*(C'\fR will complain that the file has
already been opened by a different proccess.
More capable editors can handle this accordingly and force the change.
.SS "Whats the easiest way to install Mojolicious on \s-1UNIX\s0?"
.IX Subsection "Whats the easiest way to install Mojolicious on UNIX?"
Quite possibly this oneliner.
.PP
.Vb 1
\&  sudo sh \-c "curl \-L cpanmin.us | perl \- Mojolicious"
.Ve
.SS "I think Mojolicious is awesome, how can i support you guys?"
.IX Subsection "I think Mojolicious is awesome, how can i support you guys?"
Share your success story via blog or twitter, get more people hooked! :)
.SS "I think i have found a bug, what should i do now?"
.IX Subsection "I think i have found a bug, what should i do now?"
First make sure you are using the latest version of Mojolicious, it is
quite likely that the bug has already been fixed.
If that doesn't help prepare a test case demonstrating the bug, you are not
expected to fix it yourself, but you'll have to make sure the developers can
replicate your problem.
Sending in your whole application generally does more harm than good, the
\&\f(CW\*(C`t\*(C'\fR directory of this distribution has many good examples for how to do it
right.
Writing a test is usually the hardest part of fixing a bug, so the better
your test case the faster it can be fixed. ;)
.PP
Once thats done you can contact the developers via GitHub
(<https://github.com/kraih/mojo/issues>), mailing list
(<http://groups.google.com/group/mojolicious>) or \s-1IRC\s0
(\f(CW\*(C`#mojo\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR).
.PP
If you decide to fix the bug yourself make sure to also take a look at
Mojolicious::Guides::CodingGuidelines.
.SS "Which namespace should i use for Mojolicious plugins?"
.IX Subsection "Which namespace should i use for Mojolicious plugins?"
For all new plugins that you might want to release to \s-1CPAN\s0 we suggest using
the \*(L"Mojolicious::Plugin\*(R" namespace.
While \*(L"MojoX\*(R" has been used a lot in the past, it is now deprecated.
.SH "MORE"
.IX Header "MORE"
You can continue with Mojolicious::Guides now or take a look at the
Mojolicious wiki <http://github.com/kraih/mojo/wiki>, which contains a lot
more documentation and examples by many different authors.
