.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::UserAgent 3pm"
.TH Mojo::UserAgent 3pm "2011-04-30" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::UserAgent \- Async IO HTTP 1.1 And WebSocket User Agent
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Mojo::UserAgent;
\&  my $ua = Mojo::UserAgent\->new;
\&
\&  # Grab the latest Mojolicious release :)
\&  my $latest = \*(Aqhttp://latest.mojolicio.us\*(Aq;
\&  print $ua\->max_redirects(3)\->get($latest)\->res\->body;
\&
\&  # Quick JSON request
\&  my $trends = \*(Aqhttp://search.twitter.com/trends.json\*(Aq;
\&  print $ua\->get($trends)\->res\->json\->{trends}\->[0]\->{name};
\&
\&  # Extract data from HTML and XML resources
\&  print $ua\->get(\*(Aqmojolicio.us\*(Aq)\->res\->dom\->at(\*(Aqtitle\*(Aq)\->text;
\&
\&  # Scrape the latest headlines from a news site
\&  my $news = \*(Aqhttp://digg.com\*(Aq;
\&  $ua\->max_redirects(3);
\&  $ua\->get($news)\->res\->dom(\*(Aqh3 > a.story\-title\*(Aq)\->each(sub {
\&    print shift\->text . "\en";
\&  });
\&
\&  # Form post with exception handling
\&  my $cpan   = \*(Aqhttp://search.cpan.org/search\*(Aq;
\&  my $search = {q => \*(Aqmojo\*(Aq};
\&  my $tx     = $ua\->post_form($cpan => $search);
\&  if (my $res = $tx\->success) { print $res\->body }
\&  else {
\&    my ($message, $code) = $tx\->error;
\&    print "Error: $message";
\&  }
\&
\&  # TLS certificate authentication
\&  $ua\->cert(\*(Aqtls.crt\*(Aq)\->key(\*(Aqtls.key\*(Aq)\->get(\*(Aqhttps://mojolicio.us\*(Aq);
\&
\&  # Websocket request
\&  $ua\->websocket(\*(Aqws://websockets.org:8787\*(Aq => sub {
\&    my $tx = pop;
\&    $tx\->on_finish(sub { Mojo::IOLoop\->stop });
\&    $tx\->on_message(sub {
\&      my ($tx, $message) = @_;
\&      print "$message\en";
\&      $tx\->finish;
\&    });
\&    $tx\->send_message(\*(Aqhi there!\*(Aq);
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::UserAgent is a full featured async io \s-1HTTP\s0 1.1 and WebSocket user
agent with \f(CW\*(C`IPv6\*(C'\fR, \f(CW\*(C`TLS\*(C'\fR, \f(CW\*(C`epoll\*(C'\fR and \f(CW\*(C`kqueue\*(C'\fR support.
.PP
Optional modules IO::KQueue, IO::Epoll, IO::Socket::IP and
IO::Socket::SSL are supported transparently and used if installed.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::UserAgent implements the following attributes.
.ie n .SS """app"""
.el .SS "\f(CWapp\fP"
.IX Subsection "app"
.Vb 2
\&  my $app = $ua\->app;
\&  $ua     = $ua\->app(MyApp\->new);
.Ve
.PP
A Mojo application to associate this user agent with.
If set, local requests will be processed in this application.
.ie n .SS """cert"""
.el .SS "\f(CWcert\fP"
.IX Subsection "cert"
.Vb 2
\&  my $cert = $ua\->cert;
\&  $ua      = $ua\->cert(\*(Aqtls.crt\*(Aq);
.Ve
.PP
Path to \s-1TLS\s0 certificate file, defaults to the value of \f(CW\*(C`MOJO_CERT_FILE\*(C'\fR.
.ie n .SS """cookie_jar"""
.el .SS "\f(CWcookie_jar\fP"
.IX Subsection "cookie_jar"
.Vb 2
\&  my $cookie_jar = $ua\->cookie_jar;
\&  $ua            = $ua\->cookie_jar(Mojo::CookieJar\->new);
.Ve
.PP
Cookie jar to use for this user agents requests, by default a
Mojo::CookieJar object.
.ie n .SS """http_proxy"""
.el .SS "\f(CWhttp_proxy\fP"
.IX Subsection "http_proxy"
.Vb 2
\&  my $proxy = $ua\->http_proxy;
\&  $ua       = $ua\->http_proxy(\*(Aqhttp://sri:secret@127.0.0.1:8080\*(Aq);
.Ve
.PP
Proxy server to use for \s-1HTTP\s0 and WebSocket requests.
.ie n .SS """https_proxy"""
.el .SS "\f(CWhttps_proxy\fP"
.IX Subsection "https_proxy"
.Vb 2
\&  my $proxy = $ua\->https_proxy;
\&  $ua       = $ua\->https_proxy(\*(Aqhttp://sri:secret@127.0.0.1:8080\*(Aq);
.Ve
.PP
Proxy server to use for \s-1HTTPS\s0 and WebSocket requests.
.ie n .SS """ioloop"""
.el .SS "\f(CWioloop\fP"
.IX Subsection "ioloop"
.Vb 2
\&  my $loop = $ua\->ioloop;
\&  $ua      = $ua\->ioloop(Mojo::IOLoop\->new);
.Ve
.PP
Loop object to use for blocking io operations, by default a Mojo::IOLoop
object will be used.
.ie n .SS """keep_alive_timeout"""
.el .SS "\f(CWkeep_alive_timeout\fP"
.IX Subsection "keep_alive_timeout"
.Vb 2
\&  my $keep_alive_timeout = $ua\->keep_alive_timeout;
\&  $ua                    = $ua\->keep_alive_timeout(15);
.Ve
.PP
Timeout in seconds for keep alive between requests, defaults to \f(CW15\fR.
.ie n .SS """key"""
.el .SS "\f(CWkey\fP"
.IX Subsection "key"
.Vb 2
\&  my $key = $ua\->key;
\&  $ua     = $ua\->key(\*(Aqtls.crt\*(Aq);
.Ve
.PP
Path to \s-1TLS\s0 key file, defaults to the value of \f(CW\*(C`MOJO_KEY_FILE\*(C'\fR.
.ie n .SS """log"""
.el .SS "\f(CWlog\fP"
.IX Subsection "log"
.Vb 2
\&  my $log = $ua\->log;
\&  $ua     = $ua\->log(Mojo::Log\->new);
.Ve
.PP
A Mojo::Log object used for logging, by default the application log will
be used.
.ie n .SS """max_connections"""
.el .SS "\f(CWmax_connections\fP"
.IX Subsection "max_connections"
.Vb 2
\&  my $max_connections = $ua\->max_connections;
\&  $ua                 = $ua\->max_connections(5);
.Ve
.PP
Maximum number of keep alive connections that the user agent will retain
before it starts closing the oldest cached ones, defaults to \f(CW5\fR.
.ie n .SS """max_redirects"""
.el .SS "\f(CWmax_redirects\fP"
.IX Subsection "max_redirects"
.Vb 2
\&  my $max_redirects = $ua\->max_redirects;
\&  $ua               = $ua\->max_redirects(3);
.Ve
.PP
Maximum number of redirects the user agent will follow before it fails,
defaults to the value of \f(CW\*(C`MOJO_MAX_REDIRECTS\*(C'\fR or \f(CW0\fR.
.ie n .SS """name"""
.el .SS "\f(CWname\fP"
.IX Subsection "name"
.Vb 2
\&  my $name = $ua\->name;
\&  $ua      = $ua\->name(\*(AqMojolicious\*(Aq);
.Ve
.PP
Value for \f(CW\*(C`User\-Agent\*(C'\fR request header, defaults to \f(CW\*(C`Mojolicious (Perl)\*(C'\fR.
.ie n .SS """no_proxy"""
.el .SS "\f(CWno_proxy\fP"
.IX Subsection "no_proxy"
.Vb 2
\&  my $no_proxy = $ua\->no_proxy;
\&  $ua          = $ua\->no_proxy([\*(Aqlocalhost\*(Aq, \*(Aqintranet.mojolicio.us\*(Aq]);
.Ve
.PP
Domains that don't require a proxy server to be used.
Note that this attribute is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """on_start"""
.el .SS "\f(CWon_start\fP"
.IX Subsection "on_start"
.Vb 2
\&  my $cb = $ua\->on_start;
\&  $ua    = $ua\->on_start(sub {...});
.Ve
.PP
Callback to be invoked whenever a new transaction is about to start, this
includes automatically prepared proxy \f(CW\*(C`CONNECT\*(C'\fR requests and followed
redirects.
.PP
.Vb 4
\&  $ua\->on_start(sub {
\&    my ($ua, $tx) = @_;
\&    $tx\->req\->headers\->header(\*(AqX\-Bender\*(Aq, \*(AqBite my shiny metal ass!\*(Aq);
\&  });
.Ve
.ie n .SS """websocket_timeout"""
.el .SS "\f(CWwebsocket_timeout\fP"
.IX Subsection "websocket_timeout"
.Vb 2
\&  my $websocket_timeout = $ua\->websocket_timeout;
\&  $ua                   = $ua\->websocket_timeout(300);
.Ve
.PP
Timeout in seconds for WebSockets to be idle, defaults to \f(CW300\fR.
.SH "METHODS"
.IX Header "METHODS"
Mojo::UserAgent inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """build_form_tx"""
.el .SS "\f(CWbuild_form_tx\fP"
.IX Subsection "build_form_tx"
.Vb 10
\&  my $tx = $ua\->build_form_tx(\*(Aqhttp://kraih.com/foo\*(Aq => {test => 123});
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    \*(AqUTF\-8\*(Aq,
\&    {test => 123}
\&  );
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {test => 123},
\&    {Accept => \*(Aq*/*\*(Aq}
\&  );
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    \*(AqUTF\-8\*(Aq,
\&    {test => 123},
\&    {Accept => \*(Aq*/*\*(Aq}
\&  );
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {file => {file => \*(Aq/foo/bar.txt\*(Aq}}
\&  );
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {file => {content => \*(Aqlalala\*(Aq}}
\&  );
\&  my $tx = $ua\->build_form_tx(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {myzip => {file => $asset, filename => \*(Aqfoo.zip\*(Aq}}
\&  );
.Ve
.PP
Versatile Mojo::Transaction::HTTP builder for forms.
.PP
.Vb 3
\&  my $tx = $ua\->build_form_tx(\*(Aqhttp://kraih.com/foo\*(Aq => {test => 123});
\&  $tx\->res\->body(sub { print $_[1] });
\&  $ua\->start($tx);
.Ve
.ie n .SS """build_tx"""
.el .SS "\f(CWbuild_tx\fP"
.IX Subsection "build_tx"
.Vb 6
\&  my $tx = $ua\->build_tx(GET => \*(Aqmojolicio.us\*(Aq);
\&  my $tx = $ua\->build_tx(POST => \*(Aqhttp://mojolicio.us\*(Aq);
\&  my $tx = $ua\->build_tx(GET => \*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $ua\->build_tx(
\&    POST => \*(Aqhttp://kraih.com\*(Aq => {{Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq
\&  );
.Ve
.PP
Versatile general purpose Mojo::Transaction::HTTP builder.
.PP
.Vb 4
\&  # Streaming response
\&  my $tx = $ua\->build_tx(GET => \*(Aqhttp://mojolicio.us\*(Aq);
\&  $tx\->res\->body(sub { print $_[1] });
\&  $ua\->start($tx);
\&
\&  # Custom socket
\&  my $tx = $ua\->build_tx(GET => \*(Aqhttp://mojolicio.us\*(Aq);
\&  $tx\->connection($socket);
\&  $ua\->start($tx);
.Ve
.ie n .SS """build_websocket_tx"""
.el .SS "\f(CWbuild_websocket_tx\fP"
.IX Subsection "build_websocket_tx"
.Vb 1
\&  my $tx = $ua\->build_websocket_tx(\*(Aqws://localhost:3000\*(Aq);
.Ve
.PP
Versatile Mojo::Transaction::HTTP builder for WebSocket handshakes.
An upgrade to Mojo::Transaction::WebSocket will happen automatically after
a successful handshake is performed.
.ie n .SS """delete"""
.el .SS "\f(CWdelete\fP"
.IX Subsection "delete"
.Vb 3
\&  my $tx = $ua\->delete(\*(Aqhttp://kraih.com\*(Aq);
\&  my $tx = $ua\->delete(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq};
\&  my $tx = $ua\->delete(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`DELETE\*(C'\fR request.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->delete(\*(Aqhttp://kraih.com\*(Aq => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """detect_proxy"""
.el .SS "\f(CWdetect_proxy\fP"
.IX Subsection "detect_proxy"
.Vb 1
\&  $ua = $ua\->detect_proxy;
.Ve
.PP
Check environment variables \f(CW\*(C`HTTP_PROXY\*(C'\fR, \f(CW\*(C`http_proxy\*(C'\fR, \f(CW\*(C`HTTPS_PROXY\*(C'\fR,
\&\f(CW\*(C`https_proxy\*(C'\fR, \f(CW\*(C`NO_PROXY\*(C'\fR and \f(CW\*(C`no_proxy\*(C'\fR for proxy information.
.ie n .SS """get"""
.el .SS "\f(CWget\fP"
.IX Subsection "get"
.Vb 3
\&  my $tx = $ua\->get(\*(Aqhttp://kraih.com\*(Aq);
\&  my $tx = $ua\->get(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $ua\->get(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`GET\*(C'\fR request.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->get(\*(Aqhttp://kraih.com\*(Aq => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """head"""
.el .SS "\f(CWhead\fP"
.IX Subsection "head"
.Vb 3
\&  my $tx = $ua\->head(\*(Aqhttp://kraih.com\*(Aq);
\&  my $tx = $ua\->head(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $ua\->head(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`HEAD\*(C'\fR request.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->head(\*(Aqhttp://kraih.com\*(Aq => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """need_proxy"""
.el .SS "\f(CWneed_proxy\fP"
.IX Subsection "need_proxy"
.Vb 1
\&  my $need_proxy = $ua\->need_proxy(\*(Aqintranet.mojolicio.us\*(Aq);
.Ve
.PP
Check if request for domain would use a proxy server.
Note that this method is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """post"""
.el .SS "\f(CWpost\fP"
.IX Subsection "post"
.Vb 3
\&  my $tx = $ua\->post(\*(Aqhttp://kraih.com\*(Aq);
\&  my $tx = $ua\->post(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $ua\->post(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`POST\*(C'\fR request.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->post(\*(Aqhttp://kraih.com\*(Aq => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """post_form"""
.el .SS "\f(CWpost_form\fP"
.IX Subsection "post_form"
.Vb 10
\&  my $tx = $ua\->post_form(\*(Aqhttp://kraih.com/foo\*(Aq => {test => 123});
\&  my $tx = $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq
\&    \*(AqUTF\-8\*(Aq,
\&    {test => 123}
\&  );
\&  my $tx  = $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {test => 123},
\&    {Accept => \*(Aq*/*\*(Aq}
\&  );
\&  my $tx  = $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    \*(AqUTF\-8\*(Aq,
\&    {test => 123},
\&    {Accept => \*(Aq*/*\*(Aq}
\&  );
\&  my $tx = $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {file => {file => \*(Aq/foo/bar.txt\*(Aq}}
\&  );
\&  my $tx= $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {file => {content => \*(Aqlalala\*(Aq}}
\&  );
\&  my $tx = $ua\->post_form(
\&    \*(Aqhttp://kraih.com/foo\*(Aq,
\&    {myzip => {file => $asset, filename => \*(Aqfoo.zip\*(Aq}}
\&  );
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`POST\*(C'\fR request with form data.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->post_form(\*(Aqhttp://kraih.com\*(Aq => {q => \*(Aqtest\*(Aq} => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """put"""
.el .SS "\f(CWput\fP"
.IX Subsection "put"
.Vb 3
\&  my $tx = $ua\->put(\*(Aqhttp://kraih.com\*(Aq);
\&  my $tx = $ua\->put(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq});
\&  my $tx = $ua\->put(\*(Aqhttp://kraih.com\*(Aq => {Accept => \*(Aq*/*\*(Aq} => \*(AqHi!\*(Aq);
.Ve
.PP
Perform blocking \s-1HTTP\s0 \f(CW\*(C`PUT\*(C'\fR request.
You can also append a callback to perform requests non-blocking.
.PP
.Vb 5
\&  $ua\->put(\*(Aqhttp://kraih.com\*(Aq => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """start"""
.el .SS "\f(CWstart\fP"
.IX Subsection "start"
.Vb 1
\&  $ua = $ua\->start($tx);
.Ve
.PP
Process blocking transaction.
You can also append a callback to perform transactions non-blocking.
.PP
.Vb 5
\&  $ua\->start($tx => sub {
\&    print pop\->res\->body;
\&    Mojo::IOLoop\->stop;
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.ie n .SS """test_server"""
.el .SS "\f(CWtest_server\fP"
.IX Subsection "test_server"
.Vb 2
\&  my $port = $ua\->test_server;
\&  my $port = $ua\->test_server(\*(Aqhttps\*(Aq);
.Ve
.PP
Starts a test server for \f(CW\*(C`app\*(C'\fR if necessary and returns the port number.
Note that this method is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """websocket"""
.el .SS "\f(CWwebsocket\fP"
.IX Subsection "websocket"
.Vb 4
\&  $ua\->websocket(\*(Aqws://localhost:3000\*(Aq => sub {...});
\&  $ua\->websocket(
\&    \*(Aqws://localhost:3000\*(Aq => {\*(AqUser\-Agent\*(Aq => \*(AqAgent 1.0\*(Aq} => sub {...}
\&  );
.Ve
.PP
Open a non-blocking WebSocket connection with transparent handshake.
.PP
.Vb 7
\&  $ua\->websocket(\*(Aqws://localhost:3000\*(Aq => sub {
\&    my $tx = pop;
\&    $tx\->on_finish(sub { Mojo::IOLoop\->stop });
\&    $tx\->on_message(sub { say pop });
\&    $tx\->send_message(\*(AqHi!\*(Aq);
\&  });
\&  Mojo::IOLoop\->start;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
