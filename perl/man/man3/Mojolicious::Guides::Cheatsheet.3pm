.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Guides::Cheatsheet 3pm"
.TH Mojolicious::Guides::Cheatsheet 3pm "2011-04-25" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Guides::Cheatsheet \- Reference
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This document contains a concise all-purpose reference.
.SH "RESERVED STASH VALUES"
.IX Header "RESERVED STASH VALUES"
Besides everything prefixed with \f(CW\*(C`mojo.\*(C'\fR there are a few stash values that
are reserved for routes and the renderer.
.ie n .SS """action"""
.el .SS "\f(CWaction\fP"
.IX Subsection "action"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(action => \*(Aqhello\*(Aq);
.Ve
.PP
Action to dispatch to.
.ie n .SS """app"""
.el .SS "\f(CWapp\fP"
.IX Subsection "app"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(app => MyApp\->new);
.Ve
.PP
Embedded application to dispatch to.
.ie n .SS """cb"""
.el .SS "\f(CWcb\fP"
.IX Subsection "cb"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(cb => sub {...});
.Ve
.PP
Callback to dispatch to.
.ie n .SS """class"""
.el .SS "\f(CWclass\fP"
.IX Subsection "class"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(class => \*(AqGreeting\*(Aq);
.Ve
.PP
Camelized alternative to \f(CW\*(C`controller\*(C'\fR.
.ie n .SS """controller"""
.el .SS "\f(CWcontroller\fP"
.IX Subsection "controller"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(controller => \*(Aqgreetings\*(Aq);
.Ve
.PP
Controller to dispatch to.
.ie n .SS """data"""
.el .SS "\f(CWdata\fP"
.IX Subsection "data"
.Vb 1
\&  $self\->render(data => \*(Aqraw bytes\*(Aq);
.Ve
.PP
Turn raw bytes into a response.
.ie n .SS """exception"""
.el .SS "\f(CWexception\fP"
.IX Subsection "exception"
.Vb 1
\&  <%= $exception %>
.Ve
.PP
Mojo::Exception object for exception templates.
.ie n .SS """extends"""
.el .SS "\f(CWextends\fP"
.IX Subsection "extends"
.Vb 1
\&  $self\->render(extends => \*(Aqtemplate\*(Aq);
.Ve
.PP
Template to extend.
.ie n .SS """format"""
.el .SS "\f(CWformat\fP"
.IX Subsection "format"
.Vb 1
\&  $self\->render(format => \*(Aqrss\*(Aq);
.Ve
.PP
Format to render.
.ie n .SS """handler"""
.el .SS "\f(CWhandler\fP"
.IX Subsection "handler"
.Vb 1
\&  $self\->render(handler => \*(Aqep\*(Aq);
.Ve
.PP
Handler to use for rendering.
.ie n .SS """inline"""
.el .SS "\f(CWinline\fP"
.IX Subsection "inline"
.Vb 1
\&  $self\->render(inline => \*(Aq<%= 1 + 1%>\*(Aq);
.Ve
.PP
Inline template to render.
.ie n .SS """json"""
.el .SS "\f(CWjson\fP"
.IX Subsection "json"
.Vb 1
\&  $self\->render(json => {foo => 23});
.Ve
.PP
Turn Perl structure into \s-1JSON\s0 response.
.ie n .SS """layout"""
.el .SS "\f(CWlayout\fP"
.IX Subsection "layout"
.Vb 1
\&  $self\->render(layout => \*(Aqgreen\*(Aq);
.Ve
.PP
Layout to render.
.ie n .SS """method"""
.el .SS "\f(CWmethod\fP"
.IX Subsection "method"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(method => \*(Aqhello\*(Aq);
.Ve
.PP
Alternative to \f(CW\*(C`action\*(C'\fR.
.ie n .SS """namespace"""
.el .SS "\f(CWnamespace\fP"
.IX Subsection "namespace"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(namespace => \*(AqTestApp\*(Aq, method => \*(Aqlulz\*(Aq);
.Ve
.PP
Namespace to dispatch to.
.ie n .SS """partial"""
.el .SS "\f(CWpartial\fP"
.IX Subsection "partial"
.Vb 1
\&  my $result = $self\->render(partial => 1);
.Ve
.PP
Return rendering result instead of turning it into a response.
.ie n .SS """path"""
.el .SS "\f(CWpath\fP"
.IX Subsection "path"
.Vb 1
\&  $r\->route(\*(Aq/welcome\*(Aq)\->to(path => \*(Aq/test\*(Aq, app => MyApp\->new);
.Ve
.PP
Base path to use for dispatching to embedded applications.
.ie n .SS """status"""
.el .SS "\f(CWstatus\fP"
.IX Subsection "status"
.Vb 1
\&  $self\->render(status => 404);
.Ve
.PP
Status code to use for rendered response.
.ie n .SS """template"""
.el .SS "\f(CWtemplate\fP"
.IX Subsection "template"
.Vb 1
\&  $self\->render(template => \*(Aqbye\*(Aq);
.Ve
.PP
Template to render.
.ie n .SS """text"""
.el .SS "\f(CWtext\fP"
.IX Subsection "text"
.Vb 1
\&  $self\->render(text => \*(AqHello World!\*(Aq);
.Ve
.PP
Turn characters into a response.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
Many parts of Mojolicious can be tuned with environment variables.
Debug environment variables are excluded because they are for developer use
only.
.ie n .SS """MOJO_APP"""
.el .SS "\f(CWMOJO_APP\fP"
.IX Subsection "MOJO_APP"
Decides which Mojolicious or Mojo application will be used, should
always contain a class name like \f(CW\*(C`MyApp\*(C'\fR, usually defaults to
Mojo::HelloWorld.
.PP
.Vb 1
\&  MOJO_APP=MyApp
.Ve
.ie n .SS """MOJO_CA_FILE"""
.el .SS "\f(CWMOJO_CA_FILE\fP"
.IX Subsection "MOJO_CA_FILE"
The path to the \s-1TLS\s0 \s-1CA\s0 authority file, should always contain a path like
\&\f(CW\*(C`/etc/tls/cacerts.pem\*(C'\fR.
Note that IO::Socket::SSL must be installed for \s-1TLS\s0 support.
.PP
.Vb 1
\&  MOJO_CA_FILE=/etc/tls/cacerts.pem
.Ve
.ie n .SS """MOJO_CERT_FILE"""
.el .SS "\f(CWMOJO_CERT_FILE\fP"
.IX Subsection "MOJO_CERT_FILE"
The path to the \s-1TLS\s0 certificate, should always contain a path like
\&\f(CW\*(C`/etc/tls/client.crt\*(C'\fR.
Note that IO::Socket::SSL must be installed for \s-1TLS\s0 support.
.PP
.Vb 1
\&  MOJO_CERT_FILE=/etc/tls/client.crt
.Ve
.ie n .SS """MOJO_CHUNK_SIZE"""
.el .SS "\f(CWMOJO_CHUNK_SIZE\fP"
.IX Subsection "MOJO_CHUNK_SIZE"
Chunk size used for \s-1IO\s0 operations in bytes, a bigger chunk size speeds up \s-1IO\s0
operations but will also use more memory, defaults to \f(CW131072\fR.
.PP
.Vb 1
\&  MOJO_CHUNK_SIZE=1024
.Ve
.ie n .SS """MOJO_CONFIG"""
.el .SS "\f(CWMOJO_CONFIG\fP"
.IX Subsection "MOJO_CONFIG"
Config file to be used by Mojolicious::Plugin::Config and
Mojolicious::Plugin::JsonConfig, quite useful for testing.
.PP
.Vb 1
\&   MOJO_CONFIG=myapp.conf
.Ve
.ie n .SS """MOJO_DNS_SERVER"""
.el .SS "\f(CWMOJO_DNS_SERVER\fP"
.IX Subsection "MOJO_DNS_SERVER"
\&\f(CW\*(C`DNS\*(C'\fR server to use for non-blocking lookups.
.PP
.Vb 1
\&  MOJO_DNS_SERVER=8.8.8.8
.Ve
.ie n .SS """MOJO_HOME"""
.el .SS "\f(CWMOJO_HOME\fP"
.IX Subsection "MOJO_HOME"
Home directory for the Mojolicious application, should always contain a
path like \f(CW\*(C`/home/sri/myapp\*(C'\fR.
.PP
.Vb 1
\&  MOJO_HOME=/home/sri/myapp
.Ve
.ie n .SS """MOJO_KEY_FILE"""
.el .SS "\f(CWMOJO_KEY_FILE\fP"
.IX Subsection "MOJO_KEY_FILE"
The path to the \s-1TLS\s0 key, should always contain a path like
\&\f(CW\*(C`/etc/tls/client.key\*(C'\fR.
Note that IO::Socket::SSL must be installed for \s-1TLS\s0 support.
.PP
.Vb 1
\&  MOJO_KEY_FILE=/etc/tls/client.key
.Ve
.ie n .SS """MOJO_LOG_LEVEL"""
.el .SS "\f(CWMOJO_LOG_LEVEL\fP"
.IX Subsection "MOJO_LOG_LEVEL"
Log level for the Mojolicious application, should contain a valid log
level like \f(CW\*(C`debug\*(C'\fR or \f(CW\*(C`error\*(C'\fR.
.PP
.Vb 2
\&  MOJO_LOG_LEVEL=debug
\&  MOJO_LOG_LEVEL=error
.Ve
.ie n .SS """MOJO_MAX_LINE_SIZE"""
.el .SS "\f(CWMOJO_MAX_LINE_SIZE\fP"
.IX Subsection "MOJO_MAX_LINE_SIZE"
Maximum line size for \s-1HTTP\s0 message start lines and headers in bytes, defaults
to \f(CW10240\fR.
.PP
.Vb 1
\&  MOJO_MAX_LINE_SIZE=2048
.Ve
.ie n .SS """MOJO_MAX_MEMORY_SIZE"""
.el .SS "\f(CWMOJO_MAX_MEMORY_SIZE\fP"
.IX Subsection "MOJO_MAX_MEMORY_SIZE"
Maximum size in bytes for \s-1HTTP\s0 content to keep in memory, bigger content will
be written to temporary files, defaults to \f(CW262144\fR.
.PP
.Vb 1
\&  MOJO_MAX_MEMORY_SIZE=2048
.Ve
.ie n .SS """MOJO_MAX_MESSAGE_SIZE"""
.el .SS "\f(CWMOJO_MAX_MESSAGE_SIZE\fP"
.IX Subsection "MOJO_MAX_MESSAGE_SIZE"
Maximum size for \s-1HTTP\s0 messages in bytes, defaults to \f(CW5242880\fR.
.PP
.Vb 1
\&  MOJO_MAX_MESSAGE_SIZE=1024
.Ve
.ie n .SS """MOJO_MAX_REDIRECTS"""
.el .SS "\f(CWMOJO_MAX_REDIRECTS\fP"
.IX Subsection "MOJO_MAX_REDIRECTS"
.Vb 1
\&  MOJO_MAX_REDIRECTS=3
.Ve
.PP
Maximum number of redirects Mojo::UserAgent will follow, defaults to \f(CW0\fR.
.ie n .SS """MOJO_MAX_WEBSOCKET_SIZE"""
.el .SS "\f(CWMOJO_MAX_WEBSOCKET_SIZE\fP"
.IX Subsection "MOJO_MAX_WEBSOCKET_SIZE"
Maximum size for WebSocket messages in bytes, defaults to \f(CW262144\fR.
.PP
.Vb 1
\&  MOJO_MAX_WEBSOCKET_SIZE=1024
.Ve
.ie n .SS """MOJO_MODE"""
.el .SS "\f(CWMOJO_MODE\fP"
.IX Subsection "MOJO_MODE"
Run mode for the Mojolicious application, should contain a valid mode like
\&\f(CW\*(C`development\*(C'\fR or \f(CW\*(C`production\*(C'\fR.
.PP
.Vb 2
\&  MOJO_MODE=development
\&  MOJO_MODE=production
.Ve
.ie n .SS """MOJO_NO_BONJOUR"""
.el .SS "\f(CWMOJO_NO_BONJOUR\fP"
.IX Subsection "MOJO_NO_BONJOUR"
Disable Bonjour support.
Note that Net::Rendezvous::Publish must be installed for Bonjour support.
.PP
.Vb 1
\&  MOJO_NO_BONJOUR=1
.Ve
.ie n .SS """MOJO_NO_DETECT"""
.el .SS "\f(CWMOJO_NO_DETECT\fP"
.IX Subsection "MOJO_NO_DETECT"
Disable Mojolicious deployment environment detection.
.PP
.Vb 1
\&  MOJO_NO_DETECT=1
.Ve
.ie n .SS """MOJO_NO_IPV6"""
.el .SS "\f(CWMOJO_NO_IPV6\fP"
.IX Subsection "MOJO_NO_IPV6"
Disable IPv6 support.
Note that IO::Socket::IP must be installed for IPv6 support.
.PP
.Vb 1
\&  MOJO_NO_IPV6=1
.Ve
.ie n .SS """MOJO_NO_TLS"""
.el .SS "\f(CWMOJO_NO_TLS\fP"
.IX Subsection "MOJO_NO_TLS"
Disable \s-1TLS\s0 support, this might result in slightly better performance and
less memory use.
Note that IO::Socket::SSL must be installed for \s-1TLS\s0 support.
.PP
.Vb 1
\&  MOJO_NO_TLS=1
.Ve
.ie n .SS """MOJO_POLL"""
.el .SS "\f(CWMOJO_POLL\fP"
.IX Subsection "MOJO_POLL"
Force poll mainloop for \s-1IO\s0 operations, this should only be used for testing
since other mainloops are generally faster and scale better.
.PP
.Vb 1
\&  MOJO_POLL=1
.Ve
.ie n .SS """MOJO_PROXY"""
.el .SS "\f(CWMOJO_PROXY\fP"
.IX Subsection "MOJO_PROXY"
Enable automatic \s-1HTTP\s0 and \s-1HTTPS\s0 proxy detection in Mojo::UserAgent, for
security reasons this is disabled by default.
.PP
.Vb 1
\&  MOJO_PROXY=1
.Ve
.ie n .SS """MOJO_RELOAD"""
.el .SS "\f(CWMOJO_RELOAD\fP"
.IX Subsection "MOJO_RELOAD"
Enable Mojolicious application reloading, changes to your application will
be detected automatically so you don't have to restart the server manually.
.PP
.Vb 1
\&  MOJO_RELOAD=1
.Ve
.ie n .SS """MOJO_REVERSE_PROXY"""
.el .SS "\f(CWMOJO_REVERSE_PROXY\fP"
.IX Subsection "MOJO_REVERSE_PROXY"
Enable reverse proxy support for Mojolicious application.
This allows Mojolicious to automatically pick up the \f(CW\*(C`X\-Forwarded\-For\*(C'\fR,
\&\f(CW\*(C`X\-Forwarded\-Host\*(C'\fR and \f(CW\*(C`X\-Forwarded\-HTTPS\*(C'\fR headers.
.PP
.Vb 1
\&  MOJO_REVERSE_PROXY=1
.Ve
.ie n .SS """MOJO_STATIC_CLASS"""
.el .SS "\f(CWMOJO_STATIC_CLASS\fP"
.IX Subsection "MOJO_STATIC_CLASS"
Class the Mojolicious static file dispatcher should use to find \f(CW\*(C`DATA\*(C'\fR
templates, defaults to \f(CW\*(C`main\*(C'\fR.
.PP
.Vb 1
\&  MOJO_STATIC_CLASS=MyApp
.Ve
.ie n .SS """MOJO_TEMPLATE_CLASS"""
.el .SS "\f(CWMOJO_TEMPLATE_CLASS\fP"
.IX Subsection "MOJO_TEMPLATE_CLASS"
Class the Mojolicious renderer should use to find \f(CW\*(C`DATA\*(C'\fR templates,
defaults to \f(CW\*(C`main\*(C'\fR.
.PP
.Vb 1
\&  MOJO_TEMPLATE_CLASS=MyApp
.Ve
.ie n .SS """MOJO_TMPDIR"""
.el .SS "\f(CWMOJO_TMPDIR\fP"
.IX Subsection "MOJO_TMPDIR"
Directory for temporary files like huge uploads, by default a random platform
specific temporary directory will be used.
.PP
.Vb 1
\&  MOJO_TMPDIR=/tmp/mojo
.Ve
.SH "MORE"
.IX Header "MORE"
You can continue with Mojolicious::Guides now or take a look at the
Mojolicious wiki <http://github.com/kraih/mojo/wiki>, which contains a lot
more documentation and examples by many different authors.
