.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious 3pm"
.TH Mojolicious 3pm "2011-05-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious \- The Web In A Box!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Mojolicious application
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  sub startup {
\&    my $self = shift;
\&
\&    # Routes
\&    my $r = $self\->routes;
\&
\&    # Default route
\&    $r\->route(\*(Aq/:controller/:action/:id\*(Aq)\->to(\*(Aqfoo#welcome\*(Aq);
\&  }
\&
\&  # Mojolicious controller
\&  package MyApp::Foo;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # Say hello
\&  sub welcome {
\&    my $self = shift;
\&    $self\->render_text(\*(AqHi there!\*(Aq);
\&  }
\&
\&  # Say goodbye from a template (foo/bye.html.ep)
\&  sub bye { shift\->render }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Back in the early days of the web there was this wonderful Perl library
called \s-1CGI\s0, many people only learned Perl because of it.
It was simple enough to get started without knowing much about the language
and powerful enough to keep you going, learning by doing was much fun.
While most of the techniques used are outdated now, the idea behind it is
not.
Mojolicious is a new attempt at implementing this idea using state of the
art technology.
.SS "Features"
.IX Subsection "Features"
.IP "\(bu" 2
An amazing \s-1MVC\s0 web framework supporting a simplified single file mode through
Mojolicious::Lite.
.RS 2
.Sp
.RS 2
Powerful out of the box with RESTful routes, plugins, Perl-ish templates,
session management, signed cookies, testing framework, static file server,
I18N, first class unicode support and much more for you to discover.
.RE
.RE
.RS 2
.RE
.IP "\(bu" 2
Very clean, portable and Object Oriented pure Perl \s-1API\s0 without any hidden
magic and no requirements besides Perl 5.8.7.
.IP "\(bu" 2
Full stack \s-1HTTP\s0 1.1 and WebSocket client/server implementation with IPv6,
\&\s-1TLS\s0, Bonjour, \s-1IDNA\s0, Comet (long polling), chunking and multipart support.
.IP "\(bu" 2
Builtin async \s-1IO\s0 web server supporting epoll, kqueue, \s-1UNIX\s0 domain sockets and
hot deployment, perfect for embedding.
.IP "\(bu" 2
Automatic \s-1CGI\s0, FastCGI and \s-1PSGI\s0 detection.
.IP "\(bu" 2
\&\s-1JSON\s0 and \s-1XML/HTML5\s0 parser with \s-1CSS3\s0 selector support.
.IP "\(bu" 2
Fresh code based upon years of experience developing Catalyst.
.SS "Duct Tape For The \s-1HTML5\s0 Web"
.IX Subsection "Duct Tape For The HTML5 Web"
Web development for humans, making hard things possible and everything fun.
.PP
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  # Simple route with plain text response
\&  get \*(Aq/hello\*(Aq => sub { shift\->render_text(\*(AqHello World!\*(Aq) };
\&
\&  # Route to template in DATA section
\&  get \*(Aq/time\*(Aq => \*(Aqclock\*(Aq;
\&
\&  # RESTful web service sending JSON responses
\&  get \*(Aq/:offset\*(Aq => sub {
\&    my $self   = shift;
\&    my $offset = $self\->param(\*(Aqoffset\*(Aq) || 23;
\&    $self\->render_json({list => [0 .. $offset]});
\&  };
\&
\&  # Scrape information from remote sites
\&  post \*(Aq/title\*(Aq => sub {
\&    my $self = shift;
\&    my $url  = $self\->param(\*(Aqurl\*(Aq) || \*(Aqhttp://mojolicio.us\*(Aq;
\&    $self\->render_text(
\&      $self\->ua\->get($url)\->res\->dom\->at(\*(Aqhead > title\*(Aq)\->text);
\&  };
\&
\&  # WebSocket echo service
\&  websocket \*(Aq/echo\*(Aq => sub {
\&    my $self = shift;
\&    $self\->on_message(sub {
\&      my ($self, $message) = @_;
\&      $self\->send_message("echo: $message");
\&    });
\&  };
\&
\&  app\->start;
\&  _\|_DATA_\|_
\&
\&  @@ clock.html.ep
\&  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
\&  <%= link_to clock => begin %>
\&    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
\&  <% end %>
.Ve
.PP
To run this example with the built in development server just put the code
into a file and execute it with \f(CW\*(C`perl\*(C'\fR.
.PP
.Vb 2
\&  % perl example.pl daemon
\&  Server available at http://127.0.0.1:3000.
.Ve
.SS "Growing"
.IX Subsection "Growing"
Single file prototypes like the one above can easily grow into well
structured applications.
.PP
.Vb 2
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  # Runs once on application startup
\&  sub startup {
\&    my $self = shift;
\&    my $r    = $self\->routes;
\&
\&    # Route prefix for "MyApp::Example" controller
\&    my $example = $r\->route(\*(Aq/example\*(Aq)\->to(\*(Aqexample#\*(Aq);
\&
\&    # GET routes connecting the controller prefix with actions
\&    $example\->get(\*(Aq/hello\*(Aq)\->to(\*(Aq#hello\*(Aq);
\&    $example\->get(\*(Aq/time\*(Aq)\->to(\*(Aq#clock\*(Aq);
\&    $example\->get(\*(Aq/:offset\*(Aq)\->to(\*(Aq#restful\*(Aq);
\&
\&    # All common verbs are supported
\&    $example\->post(\*(Aq/title\*(Aq)\->to(\*(Aq#title\*(Aq);
\&
\&    # And much more
\&    $r\->websocket(\*(Aq/echo\*(Aq)\->to(\*(Aqrealtime#echo\*(Aq);
\&  }
\&
\&  1;
.Ve
.PP
Bigger applications are a lot easier to maintain once routing information has
been separated from action code, especially when working in teams.
.PP
.Vb 2
\&  package MyApp::Example;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # Plain text response
\&  sub hello { shift\->render_text(\*(AqHello World!\*(Aq) }
\&
\&  # Render external template "templates/example/clock.html.ep"
\&  sub clock { shift\->render }
\&
\&  # RESTful web service sending JSON responses
\&  sub restful {
\&    my $self   = shift;
\&    my $offset = $self\->param(\*(Aqoffset\*(Aq) || 23;
\&    $self\->render_json({list => [0 .. $offset]});
\&  }
\&
\&  # Scrape information from remote sites
\&  sub title {
\&    my $self = shift;
\&    my $url  = $self\->param(\*(Aqurl\*(Aq) || \*(Aqhttp://mojolicio.us\*(Aq;
\&    $self\->render_text(
\&      $self\->ua\->get($url)\->res\->dom\->at(\*(Aqhead > title\*(Aq)\->text);
\&  }
\&
\&  1;
.Ve
.PP
While the application class is unique, you can have as many controllers as
you like.
.PP
.Vb 2
\&  package MyApp::Realtime;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # WebSocket echo service
\&  sub echo {
\&    my $self = shift;
\&    $self\->on_message(sub {
\&      my ($self, $message) = @_;
\&      $self\->send_message("echo: $message");
\&    });
\&  }
\&
\&  1;
.Ve
.PP
Action code and templates can stay almost exactly the same, everything was
designed from the ground up for this very unique and fun workflow.
.PP
.Vb 4
\&  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
\&  <%= link_to clock => begin %>
\&    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
\&  <% end %>
.Ve
.SS "Have Some Cake"
.IX Subsection "Have Some Cake"
Loosely coupled building blocks, use what you like and just ignore the rest.
.PP
.Vb 10
\&  .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&  |                                                               |
\&  |                .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&  |                | .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&  |   Application  | |              Mojolicious::Lite             |
\&  |                | \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&  |                | .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&  |                | |                 Mojolicious                |
\&  \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&  .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&  |                             Mojo                              |
\&  \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&  .\-\-\-\-\-\-\-. .\-\-\-\-\-\-\-\-\-\-\-. .\-\-\-\-\-\-\-\-. .\-\-\-\-\-\-\-\-\-\-\-\-. .\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&  |  CGI  | |  FastCGI  | |  PSGI  | |  HTTP 1.1  | |  WebSocket  |
\&  \*(Aq\-\-\-\-\-\-\-\*(Aq \*(Aq\-\-\-\-\-\-\-\-\-\-\-\*(Aq \*(Aq\-\-\-\-\-\-\-\-\*(Aq \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.PP
For more documentation see Mojolicious::Guides and the tutorial in
Mojolicious::Lite!
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious inherits all attributes from Mojo and implements the
following new ones.
.ie n .SS """controller_class"""
.el .SS "\f(CWcontroller_class\fP"
.IX Subsection "controller_class"
.Vb 2
\&  my $class = $app\->controller_class;
\&  $app      = $app\->controller_class(\*(AqMojolicious::Controller\*(Aq);
.Ve
.PP
Class to be used for the default controller, defaults to
Mojolicious::Controller.
.ie n .SS """mode"""
.el .SS "\f(CWmode\fP"
.IX Subsection "mode"
.Vb 2
\&  my $mode = $app\->mode;
\&  $app     = $app\->mode(\*(Aqproduction\*(Aq);
.Ve
.PP
The operating mode for your application.
It defaults to the value of the environment variable \f(CW\*(C`MOJO_MODE\*(C'\fR or
\&\f(CW\*(C`development\*(C'\fR.
Mojo will name the log file after the current mode and modes other than
\&\f(CW\*(C`development\*(C'\fR will result in limited log output.
.PP
If you want to add per mode logic to your application, you can add a sub
to your application named \f(CW$mode_mode\fR.
.PP
.Vb 3
\&  sub development_mode {
\&    my $self = shift;
\&  }
\&
\&  sub production_mode {
\&    my $self = shift;
\&  }
.Ve
.ie n .SS """on_process"""
.el .SS "\f(CWon_process\fP"
.IX Subsection "on_process"
.Vb 2
\&  my $process = $app\->on_process;
\&  $app        = $app\->on_process(sub {...});
.Ve
.PP
Request processing callback, defaults to calling the \f(CW\*(C`dispatch\*(C'\fR method.
Generally you will use a plugin or controller instead of this, consider it
the sledgehammer in your toolbox.
.PP
.Vb 4
\&  $app\->on_process(sub {
\&    my ($self, $c) = @_;
\&    $self\->dispatch($c);
\&  });
.Ve
.ie n .SS """plugins"""
.el .SS "\f(CWplugins\fP"
.IX Subsection "plugins"
.Vb 2
\&  my $plugins = $app\->plugins;
\&  $app        = $app\->plugins(Mojolicious::Plugins\->new);
.Ve
.PP
The plugin loader, by default a Mojolicious::Plugins object.
You can usually leave this alone, see Mojolicious::Plugin if you want to
write a plugin.
.ie n .SS """renderer"""
.el .SS "\f(CWrenderer\fP"
.IX Subsection "renderer"
.Vb 2
\&  my $renderer = $app\->renderer;
\&  $app         = $app\->renderer(Mojolicious::Renderer\->new);
.Ve
.PP
Used in your application to render content, by default a
Mojolicious::Renderer object.
The two main renderer plugins Mojolicious::Plugin::EpRenderer and
Mojolicious::Plugin::EplRenderer contain more specific information.
.ie n .SS """routes"""
.el .SS "\f(CWroutes\fP"
.IX Subsection "routes"
.Vb 2
\&  my $routes = $app\->routes;
\&  $app       = $app\->routes(Mojolicious::Routes\->new);
.Ve
.PP
The routes dispatcher, by default a Mojolicious::Routes object.
You use this in your startup method to define the url endpoints for your
application.
.PP
.Vb 2
\&  sub startup {
\&    my $self = shift;
\&
\&    my $r = $self\->routes;
\&    $r\->route(\*(Aq/:controller/:action\*(Aq)\->to(\*(Aqtest#welcome\*(Aq);
\&  }
.Ve
.ie n .SS """secret"""
.el .SS "\f(CWsecret\fP"
.IX Subsection "secret"
.Vb 2
\&  my $secret = $app\->secret;
\&  $app       = $app\->secret(\*(Aqpassw0rd\*(Aq);
.Ve
.PP
A secret passphrase used for signed cookies and the like, defaults to the
application name which is not very secure, so you should change it!!!
As long as you are using the unsecure default there will be debug messages in
the log file reminding you to change your passphrase.
.ie n .SS """sessions"""
.el .SS "\f(CWsessions\fP"
.IX Subsection "sessions"
.Vb 2
\&  my $sessions = $app\->sessions;
\&  $app         = $app\->sessions(Mojolicious::Sessions\->new);
.Ve
.PP
Simple singed cookie based sessions, by default a Mojolicious::Sessions
object.
.ie n .SS """static"""
.el .SS "\f(CWstatic\fP"
.IX Subsection "static"
.Vb 2
\&  my $static = $app\->static;
\&  $app       = $app\->static(Mojolicious::Static\->new);
.Ve
.PP
For serving static assets from your \f(CW\*(C`public\*(C'\fR directory, by default a
Mojolicious::Static object.
.ie n .SS """types"""
.el .SS "\f(CWtypes\fP"
.IX Subsection "types"
.Vb 2
\&  my $types = $app\->types;
\&  $app      = $app\->types(Mojolicious::Types\->new);
.Ve
.PP
Responsible for tracking the types of content you want to serve in your
application, by default a Mojolicious::Types object.
You can easily register new types.
.PP
.Vb 1
\&  $app\->types\->type(twitter => \*(Aqtext/tweet\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious inherits all methods from Mojo and implements the following
new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&  my $app = Mojolicious\->new;
.Ve
.PP
Construct a new Mojolicious application.
Will automatically detect your home directory and set up logging based on
your current operating mode.
Also sets up the renderer, static dispatcher and a default set of plugins.
.ie n .SS """defaults"""
.el .SS "\f(CWdefaults\fP"
.IX Subsection "defaults"
.Vb 4
\&  my $defaults = $app\->defaults;
\&  my $foo      = $app\->defaults(\*(Aqfoo\*(Aq);
\&  $app         = $app\->defaults({foo => \*(Aqbar\*(Aq});
\&  $app         = $app\->defaults(foo => \*(Aqbar\*(Aq);
.Ve
.PP
Default values for the stash, assigned for every new request.
.PP
.Vb 3
\&  $app\->defaults\->{foo} = \*(Aqbar\*(Aq;
\&  my $foo = $app\->defaults\->{foo};
\&  delete $app\->defaults\->{foo};
.Ve
.ie n .SS """dispatch"""
.el .SS "\f(CWdispatch\fP"
.IX Subsection "dispatch"
.Vb 1
\&  $app\->dispatch($c);
.Ve
.PP
The heart of every Mojolicious application, calls the static and routes
dispatchers for every request and passes them a Mojolicious::Controller
object.
.ie n .SS """handler"""
.el .SS "\f(CWhandler\fP"
.IX Subsection "handler"
.Vb 1
\&  $tx = $app\->handler($tx);
.Ve
.PP
Sets up the default controller and calls process for every request.
.ie n .SS """helper"""
.el .SS "\f(CWhelper\fP"
.IX Subsection "helper"
.Vb 1
\&  $app\->helper(foo => sub {...});
.Ve
.PP
Add a new helper that will be available as a method of the controller object
and the application object, as well as a function in \f(CW\*(C`ep\*(C'\fR templates.
.PP
.Vb 2
\&  # Helper
\&  $app\->helper(add => sub { $_[1] + $_[2] });
\&
\&  # Controller/Application
\&  my $result = $self\->add(2, 3);
\&
\&  # Template
\&  <%= add 2, 3 %>
.Ve
.ie n .SS """hook"""
.el .SS "\f(CWhook\fP"
.IX Subsection "hook"
.Vb 1
\&  $app\->hook(after_dispatch => sub {...});
.Ve
.PP
Extend Mojolicious by adding hooks to named events.
.PP
The following events are available and run in the listed order.
.IP "after_build_tx" 2
.IX Item "after_build_tx"
Triggered right after the transaction is built and before the \s-1HTTP\s0 request
gets parsed.
One use case would be upload progress bars.
(Passed the transaction and application instances)
.Sp
.Vb 3
\&  $app\->hook(after_build_tx => sub {
\&    my ($tx, $app) = @_;
\&  });
.Ve
.IP "before_dispatch" 2
.IX Item "before_dispatch"
Triggered right before the static and routes dispatchers start their work.
Very useful for rewriting incoming requests and other preprocessing tasks.
(Passed the default controller instance)
.Sp
.Vb 3
\&  $app\->hook(before_dispatch => sub {
\&    my $self = shift;
\&  });
.Ve
.IP "after_static_dispatch" 2
.IX Item "after_static_dispatch"
Triggered after the static dispatcher determined if a static file should be
served and before the routes dispatcher starts its work, the callbacks of
this hook run in reverse order.
Mostly used for custom dispatchers and postprocessing static file responses.
(Passed the default controller instance)
.Sp
.Vb 3
\&  $app\->hook(after_static_dispatch => sub {
\&    my $self = shift;
\&  });
.Ve
.IP "after_dispatch" 2
.IX Item "after_dispatch"
Triggered after a response has been rendered, the callbacks of this hook run
in reverse order.
Note that this hook can trigger before \f(CW\*(C`after_static_dispatch\*(C'\fR due to its
dynamic nature.
Useful for all kinds of postprocessing tasks.
(Passed the current controller instance)
.Sp
.Vb 3
\&  $app\->hook(after_dispatch => sub {
\&    my $self = shift;
\&  });
.Ve
.ie n .SS """plugin"""
.el .SS "\f(CWplugin\fP"
.IX Subsection "plugin"
.Vb 6
\&  $app\->plugin(\*(Aqsomething\*(Aq);
\&  $app\->plugin(\*(Aqsomething\*(Aq, foo => 23);
\&  $app\->plugin(\*(Aqsomething\*(Aq, {foo => 23});
\&  $app\->plugin(\*(AqFoo::Bar\*(Aq);
\&  $app\->plugin(\*(AqFoo::Bar\*(Aq, foo => 23);
\&  $app\->plugin(\*(AqFoo::Bar\*(Aq, {foo => 23});
.Ve
.PP
Load a plugin.
.PP
The following plugins are included in the Mojolicious distribution as
examples.
.IP "Mojolicious::Plugin::AgentCondition" 2
.IX Item "Mojolicious::Plugin::AgentCondition"
Route condition for \f(CW\*(C`User\-Agent\*(C'\fR headers.
.IP "Mojolicious::Plugin::Charset" 2
.IX Item "Mojolicious::Plugin::Charset"
Change the application charset.
.IP "Mojolicious::Plugin::Config" 2
.IX Item "Mojolicious::Plugin::Config"
Perl-ish configuration files.
.IP "Mojolicious::Plugin::DefaultHelpers" 2
.IX Item "Mojolicious::Plugin::DefaultHelpers"
General purpose helper collection.
.IP "Mojolicious::Plugin::EplRenderer" 2
.IX Item "Mojolicious::Plugin::EplRenderer"
Renderer for plain embedded Perl templates.
.IP "Mojolicious::Plugin::EpRenderer" 2
.IX Item "Mojolicious::Plugin::EpRenderer"
Renderer for more sophisiticated embedded Perl templates.
.IP "Mojolicious::Plugin::HeaderCondition" 2
.IX Item "Mojolicious::Plugin::HeaderCondition"
Route condition for all kinds of headers.
.IP "Mojolicious::Plugin::I18n" 2
.IX Item "Mojolicious::Plugin::I18n"
Internationalization helpers.
.IP "Mojolicious::Plugin::JsonConfig" 2
.IX Item "Mojolicious::Plugin::JsonConfig"
\&\s-1JSON\s0 configuration files.
.IP "Mojolicious::Plugin::PodRenderer" 2
.IX Item "Mojolicious::Plugin::PodRenderer"
Renderer for \s-1POD\s0 files and documentation browser.
.IP "Mojolicious::Plugin::PoweredBy" 2
.IX Item "Mojolicious::Plugin::PoweredBy"
Add an \f(CW\*(C`X\-Powered\-By\*(C'\fR header to outgoing responses.
.IP "Mojolicious::Plugin::RequestTimer" 2
.IX Item "Mojolicious::Plugin::RequestTimer"
Log timing information.
.IP "Mojolicious::Plugin::TagHelpers" 2
.IX Item "Mojolicious::Plugin::TagHelpers"
Template specific helper collection.
.ie n .SS """start"""
.el .SS "\f(CWstart\fP"
.IX Subsection "start"
.Vb 2
\&  Mojolicious\->start;
\&  Mojolicious\->start(\*(Aqdaemon\*(Aq);
.Ve
.PP
Start the Mojolicious::Commands command line interface for your
application.
.ie n .SS """startup"""
.el .SS "\f(CWstartup\fP"
.IX Subsection "startup"
.Vb 1
\&  $app\->startup;
.Ve
.PP
This is your main hook into the application, it will be called at application
startup.
.PP
.Vb 3
\&  sub startup {
\&    my $self = shift;
\&  }
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Web"
.IX Subsection "Web"
.Vb 1
\&  http://mojolicio.us
.Ve
.SS "\s-1IRC\s0"
.IX Subsection "IRC"
.Vb 1
\&  #mojo on irc.perl.org
.Ve
.SS "Mailing-List"
.IX Subsection "Mailing-List"
.Vb 1
\&  http://groups.google.com/group/mojolicious
.Ve
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
.SS "Repository"
.IX Subsection "Repository"
.Vb 1
\&  http://github.com/kraih/mojo
.Ve
.SH "BUNDLED FILES"
.IX Header "BUNDLED FILES"
Mojolicious ships with a few popular static files bundled in the \f(CW\*(C`public\*(C'\fR
directory.
.SS "Mojolicious Artwork"
.IX Subsection "Mojolicious Artwork"
.Vb 1
\&  Copyright (C) 2010\-2011, Sebastian Riedel.
.Ve
.PP
Licensed under the CC-SA License, Version 3.0
<http://creativecommons.org/licenses/by\-sa/3.0>.
.SS "jQuery"
.IX Subsection "jQuery"
.Vb 1
\&  Version 1.5.2
.Ve
.PP
jQuery is a fast and concise JavaScript Library that simplifies \s-1HTML\s0 document
traversing, event handling, animating, and Ajax interactions for rapid web
development. jQuery is designed to change the way that you write JavaScript.
.PP
.Vb 1
\&  Copyright 2011, John Resig.
.Ve
.PP
Licensed under the \s-1MIT\s0 License, <http://creativecommons.org/licenses/MIT>.
.SS "Prettify.js"
.IX Subsection "Prettify.js"
.Vb 1
\&  Version 21\-Jul\-2010
.Ve
.PP
A Javascript module and \s-1CSS\s0 file that allows syntax highlighting of source
code snippets in an html page.
.PP
.Vb 1
\&  Copyright (C) 2006, Google Inc.
.Ve
.PP
Licensed under the Apache License, Version 2.0
<http://www.apache.org/licenses/LICENSE\-2.0>.
.SH "CODE NAMES"
.IX Header "CODE NAMES"
Every major release of Mojolicious has a code name, these are the ones
that have been used in the past.
.PP
1.1, \f(CW\*(C`Smiling Cat Face With Heart\-Shaped Eyes\*(C'\fR (u1F63B)
.PP
1.0, \f(CW\*(C`Snowflake\*(C'\fR (u2744)
.PP
0.999930, \f(CW\*(C`Hot Beverage\*(C'\fR (u2615)
.PP
0.999927, \f(CW\*(C`Comet\*(C'\fR (u2604)
.PP
0.999920, \f(CW\*(C`Snowman\*(C'\fR (u2603)
.SH "AUTHOR"
.IX Header "AUTHOR"
Sebastian Riedel, \f(CW\*(C`sri@cpan.org\*(C'\fR.
.SH "CORE DEVELOPERS EMERITUS"
.IX Header "CORE DEVELOPERS EMERITUS"
Retired members of the core team, we thank you dearly for your service.
.Sp
.RS 2
Viacheslav Tykhanovskyi, \f(CW\*(C`vti@cpan.org\*(C'\fR.
.RE
.SH "CREDITS"
.IX Header "CREDITS"
In alphabetical order.
.Sp
.RS 2
Abhijit Menon-Sen
.Sp
Adam Kennedy
.Sp
Adriano Ferreira
.Sp
Alex Salimon
.Sp
Alexey Likhatskiy
.Sp
Anatoly Sharifulin
.Sp
Andre Vieth
.Sp
Andrew Fresh
.Sp
Andreas Koenig
.Sp
Andy Grundman
.Sp
Aristotle Pagaltzis
.Sp
Ashley Dev
.Sp
Ask Bjoern Hansen
.Sp
Audrey Tang
.Sp
Ben van Staveren
.Sp
Breno G. de Oliveira
.Sp
Brian Duggan
.Sp
Burak Gursoy
.Sp
Ch Lamprecht
.Sp
Charlie Brady
.Sp
Chas. J. Owens \s-1IV\s0
.Sp
Christian Hansen
.Sp
Curt Tilmes
.Sp
Daniel Kimsey
.Sp
Danijel Tasov
.Sp
David Davis
.Sp
Dmitriy Shalashov
.Sp
Dmitry Konstantinov
.Sp
Eugene Toropov
.Sp
Gisle Aas
.Sp
Glen Hinkle
.Sp
Graham Barr
.Sp
Henry Tang
.Sp
Hideki Yamamura
.Sp
James Duncan
.Sp
Jan Jona Javorsek
.Sp
Jaroslav Muhin
.Sp
Jesse Vincent
.Sp
John Kingsley
.Sp
Jonathan Yu
.Sp
Kazuhiro Shibuya
.Sp
Kevin Old
.Sp
\&\s-1KITAMURA\s0 Akatsuki
.Sp
Lars Balker Rasmussen
.Sp
Leon Brocard
.Sp
Maik Fischer
.Sp
Marcus Ramberg
.Sp
Mark Stosberg
.Sp
Matthew Lineen
.Sp
Maksym Komar
.Sp
Maxim Vuets
.Sp
Mirko Westermeier
.Sp
Mons Anderson
.Sp
Moritz Lenz
.Sp
Oleg Zhelo
.Sp
Pascal Gaudette
.Sp
Paul Tomlin
.Sp
Pedro Melo
.Sp
Peter Edwards
.Sp
Pierre-Yves Ritschard
.Sp
Quentin Carbonneaux
.Sp
Rafal Pocztarski
.Sp
Randal Schwartz
.Sp
Robert Hicks
.Sp
Robin Lee
.Sp
Ryan Jendoubi
.Sp
Sascha Kiefer
.Sp
Sergey Zasenko
.Sp
Simon Bertrang
.Sp
Shu Cho
.Sp
Stanis Trendelenburg
.Sp
Tatsuhiko Miyagawa
.Sp
Terrence Brannon
.Sp
The Perl Foundation
.Sp
Tomas Znamenacek
.Sp
Ulrich Habel
.Sp
Ulrich Kautz
.Sp
Uwe Voelker
.Sp
Victor Engmark
.Sp
Yaroslav Korshak
.Sp
Yuki Kimoto
.Sp
Zak B. Elep
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011, Sebastian Riedel.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
