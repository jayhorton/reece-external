.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "README 3pm"
.TH README 3pm "2011-04-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
Back in the early days of the web there was this wonderful Perl library
called \s-1CGI\s0, many people only learned Perl because of it.
It was simple enough to get started without knowing much about the language
and powerful enough to keep you going, learning by doing was much fun.
While most of the techniques used are outdated now, the idea behind it is
not.
Mojolicious is a new attempt at implementing this idea using state of the
art technology.
.SS "Features"
.IX Subsection "Features"
.IP "\(bu" 2
An amazing \s-1MVC\s0 web framework supporting a simplified single file mode through
Mojolicious::Lite.
.RS 2
.Sp
.RS 2
Powerful out of the box with RESTful routes, plugins, Perl-ish templates,
session management, signed cookies, testing framework, static file server,
I18N, first class unicode support and much more for you to discover.
.RE
.RE
.RS 2
.RE
.IP "\(bu" 2
Very clean, portable and Object Oriented pure Perl \s-1API\s0 without any hidden
magic and no requirements besides Perl 5.8.7.
.IP "\(bu" 2
Full stack \s-1HTTP\s0 1.1 and WebSocket client/server implementation with IPv6,
\&\s-1TLS\s0, Bonjour, \s-1IDNA\s0, Comet (long polling), chunking and multipart support.
.IP "\(bu" 2
Builtin async \s-1IO\s0 web server supporting epoll, kqueue, \s-1UNIX\s0 domain sockets and
hot deployment, perfect for embedding.
.IP "\(bu" 2
Automatic \s-1CGI\s0, FastCGI and \s-1PSGI\s0 detection.
.IP "\(bu" 2
\&\s-1JSON\s0 and \s-1XML/HTML5\s0 parser with \s-1CSS3\s0 selector support.
.IP "\(bu" 2
Fresh code based upon years of experience developing Catalyst.
.SS "Installation"
.IX Subsection "Installation"
All you need is a oneliner.
.PP
.Vb 1
\&  sudo sh \-c "curl \-L cpanmin.us | perl \- Mojolicious"
.Ve
.SS "Duct Tape For The \s-1HTML5\s0 Web"
.IX Subsection "Duct Tape For The HTML5 Web"
Web development for humans, making hard things possible and everything fun.
.PP
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  # Simple route with plain text response
\&  get \*(Aq/hello\*(Aq => sub { shift\->render_text(\*(AqHello World!\*(Aq) };
\&
\&  # Route to template in DATA section
\&  get \*(Aq/time\*(Aq => \*(Aqclock\*(Aq;
\&
\&  # RESTful web service sending JSON responses
\&  get \*(Aq/:offset\*(Aq => sub {
\&    my $self   = shift;
\&    my $offset = $self\->param(\*(Aqoffset\*(Aq) || 23;
\&    $self\->render_json({list => [0 .. $offset]});
\&  };
\&
\&  # Scrape information from remote sites
\&  post \*(Aq/title\*(Aq => sub {
\&    my $self = shift;
\&    my $url  = $self\->param(\*(Aqurl\*(Aq) || \*(Aqhttp://mojolicio.us\*(Aq;
\&    $self\->render_text(
\&      $self\->ua\->get($url)\->res\->dom\->at(\*(Aqhead > title\*(Aq)\->text);
\&  };
\&
\&  # WebSocket echo service
\&  websocket \*(Aq/echo\*(Aq => sub {
\&    my $self = shift;
\&    $self\->on_message(sub {
\&      my ($self, $message) = @_;
\&      $self\->send_message("echo: $message");
\&    });
\&  };
\&
\&  app\->start;
\&  _\|_DATA_\|_
\&
\&  @@ clock.html.ep
\&  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
\&  <%= link_to clock => begin %>
\&    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
\&  <% end %>
.Ve
.PP
To run this example with the built in development server just put the code
into a file and execute it with \f(CW\*(C`perl\*(C'\fR.
.PP
.Vb 2
\&  % perl example.pl daemon
\&  Server available at http://127.0.0.1:3000.
.Ve
.SS "Growing"
.IX Subsection "Growing"
Single file prototypes like the one above can easily grow into well
structured applications.
.PP
.Vb 2
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  # Runs once on application startup
\&  sub startup {
\&    my $self = shift;
\&    my $r    = $self\->routes;
\&
\&    # Route prefix for "MyApp::Example" controller
\&    my $example = $r\->route(\*(Aq/example\*(Aq)\->to(\*(Aqexample#\*(Aq);
\&
\&    # GET routes connecting the controller prefix with actions
\&    $example\->get(\*(Aq/hello\*(Aq)\->to(\*(Aq#hello\*(Aq);
\&    $example\->get(\*(Aq/time\*(Aq)\->to(\*(Aq#clock\*(Aq);
\&    $example\->get(\*(Aq/:offset\*(Aq)\->to(\*(Aq#restful\*(Aq);
\&
\&    # All common verbs are supported
\&    $example\->post(\*(Aq/title\*(Aq)\->to(\*(Aq#title\*(Aq);
\&
\&    # And much more
\&    $r\->websocket(\*(Aq/echo\*(Aq)\->to(\*(Aqrealtime#echo\*(Aq);
\&  }
\&
\&  1;
.Ve
.PP
Bigger applications are a lot easier to maintain once routing information has
been separated from action code, especially when working in teams.
.PP
.Vb 2
\&  package MyApp::Example;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # Plain text response
\&  sub hello { shift\->render_text(\*(AqHello World!\*(Aq) }
\&
\&  # Render external template "templates/example/clock.html.ep"
\&  sub clock { shift\->render }
\&
\&  # RESTful web service sending JSON responses
\&  sub restful {
\&    my $self   = shift;
\&    my $offset = $self\->param(\*(Aqoffset\*(Aq) || 23;
\&    $self\->render_json({list => [0 .. $offset]});
\&  }
\&
\&  # Scrape information from remote sites
\&  sub title {
\&    my $self = shift;
\&    my $url  = $self\->param(\*(Aqurl\*(Aq) || \*(Aqhttp://mojolicio.us\*(Aq;
\&    $self\->render_text(
\&      $self\->ua\->get($url)\->res\->dom\->at(\*(Aqhead > title\*(Aq)\->text);
\&  }
\&
\&  1;
.Ve
.PP
While the application class is unique, you can have as many controllers as
you like.
.PP
.Vb 2
\&  package MyApp::Realtime;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # WebSocket echo service
\&  sub echo {
\&    my $self = shift;
\&    $self\->on_message(sub {
\&      my ($self, $message) = @_;
\&      $self\->send_message("echo: $message");
\&    });
\&  }
\&
\&  1;
.Ve
.PP
Action code and templates can stay almost exactly the same, everything was
designed from the ground up for this very unique and fun workflow.
.PP
.Vb 4
\&  % my ($second, $minute, $hour) = (localtime(time))[0, 1, 2];
\&  <%= link_to clock => begin %>
\&    The time is <%= $hour %>:<%= $minute %>:<%= $second %>.
\&  <% end %>
.Ve
.SS "Want to know more?"
.IX Subsection "Want to know more?"
Take a look at our excellent documentation at <http://mojolicio.us/perldoc>!
